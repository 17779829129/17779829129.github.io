<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>随便发点</title>
    <url>/2023/06/20/1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/images/12.jpg" alt><br><img src="/images/13.jpg" alt><br><img src="/images/14.jpg" alt><br><img src="/images/15.jpg" alt><br><img src="/images/17.jpg" alt><br><img src="/images/21.jpg" alt></p>
]]></content>
      <categories>
        <category>二次元</category>
      </categories>
      <tags>
        <tag>图片</tag>
      </tags>
  </entry>
  <entry>
    <title>html(二)</title>
    <url>/2023/06/24/2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1><span id="列表的应用场景">列表的应用场景</span></h1><h2><span id="1无序列表">1.无序列表</span></h2><p>代码：</p>
<pre><code>&lt;body&gt;
    &lt;ul&gt;
    &lt;li&gt;列表内容&lt;/li&gt;
    &lt;/ul&gt;
&lt;/body&gt;
</code></pre><p>场景：在网页中表示一组无顺序之分的列表，如：新闻列表</p>
<table border="1">
<caption>标签组成</caption>
     <tr>
        <th>标签名</th>
        <th>说明</th>
    </tr>
    <tr>
        <th>ul</th>
        <th>表示无序列表的整体，用于包裹li标签</th>
    </tr>
    <tr>
        <th>li </th>
        <th>表示无序标签的每一项，用于包含每一行内容</th>
    </tr>
</table> 

<p>显示特点：列表的每一项前默认显示圆点标识<br>注意点：</p>
<ul>
 <li>ul标签只能包含li标签</li>
 <li>li标签可以包含任意内容</li>
</ul>

<h2><span id="2有序列表">2.有序列表</span></h2><p>代码：</p>
<pre><code>&lt;body&gt;
     &lt;ol&gt;
     &lt;li&gt;列表内容&lt;/li&gt;
     &lt;/ol&gt;
&lt;/body&gt;
</code></pre><p>场景：在网页中表示一组有顺序之分的列表，如：排行榜</p>
<table border="1">
<caption>标签组成</caption>
     <tr>
        <th>标签名</th>
        <th>说明</th>
    </tr>
    <tr>
        <th>ol</th>
        <th>表示有序列表的整体，用于包裹li标签</th>
    </tr>
    <tr>
        <th>li </th>
        <th>表示有序标签的每一项，用于包含每一行内容</th>
    </tr>
</table> 

<p>显示特点：列表的每一项前默认显示序号标识<br>注意点：</p>
<ul>     
    <li>ol标签只允许包含li标签</li>
    <li>li标签可以包含任意内容</li>
</ul>

<h2><span id="3自定义列表">3.自定义列表</span></h2><p>代码：</p>
<pre><code>&lt;body&gt;
     &lt;dl&gt;
           &lt;dt&gt;标签内容&lt;/dt&gt;
           &lt;dd&gt;标签内容&lt;/dd&gt;
     &lt;/dl&gt;
&lt;/body&gt;
</code></pre><p>场景：在网页的底部导航中通常会使用自定义列表实现。</p>
<table border="1">
<caption>标签组成</caption>
     <tr>
        <th>标签名</th>
        <th>说明</th>
    </tr>
    <tr>
        <th>dl</th>
        <th>表示自定义列表整体，用于包裹dt/dd标签</th>
    </tr>
    <tr>
        <th>dl</th>
        <th>表示自定义列表的主题</th>
    </tr>
    <tr>
        <th>dd</th>
        <th>表示自定义列表的针对主题的每一项内容</th>
    </tr>
</table>  

<p>显示特点：dd标签会默认显示缩进效果<br>注意点：</p>
<ul>
     <li>dl标签只允许包含dt/dd标签</li>
     <li>dt/dd标签可以包含任意内容</li>
</ul>



]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>大一经历</title>
    <url>/2023/06/25/3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/images/30.jpg" alt> <img src="/images/31.jpg" alt><br><img src="/images/32.jpg" alt> <img src="/images/33.jpg" alt><br><img src="/images/34.jpg" alt> <img src="/images/35.jpg" alt><br><img src="/images/36.jpg" alt> <img src="/images/37.jpg" alt><br><img src="/images/38.jpg" alt> <img src="/images/39.jpg" alt><br><img src="/images/40.jpg" alt> <img src="/images/41.jpg" alt></p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>图片</tag>
      </tags>
  </entry>
  <entry>
    <title>html(三)</title>
    <url>/2023/06/27/4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1><span id="html">html</span></h1><h2><span id="表格">表格</span></h2><h3><span id="使用">使用</span></h3><table border="1">
<caption>基本标签</caption>
     <tr>
        <th>标签名</th>
        <th>说明</th>
    </tr>
    <tr>
        <th>table</th>
        <th>表格整体，可用于包裹多个tr</th>
    </tr>
    <tr>
        <th>tr</th>
        <th>表格每行，可用于包裹td</th>
    </tr>
    <tr>
        <th>td</th>
        <th>表格单元格，可用于包裹内容</th>
    </tr>
</table>  

<p>代码：</p>
<pre><code>&lt;body&gt;
  &lt;table&gt;
      &lt;tr&gt;
         &lt;td&gt;单元格内容&lt;/td&gt;
         &lt;td&gt;单元格内容&lt;/td&gt;     
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;第二行单元格内容&lt;/td&gt;
          &lt;td&gt;第二行单元格内容&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/table&gt;
&lt;/body&gt;
</code></pre><p>注意点：</p>
<ul>
 <li>标签的嵌套关系：table>tr>td</li>
</ul>

<h3><span id="表格的相关属性">表格的相关属性</span></h3><p>场景：设置表格基本展示效果</p>
<table border="1">
<caption>常见相关属性</caption>
     <tr>
        <th>属性名</th>
        <th>属性值</th>
        <th>效果</th>
    </tr>
    <tr>
        <th>border</th>
        <th>数字</th>
        <th>边框宽度</th>
    </tr>
    <tr>
        <th>width</th>
        <th>数字</th>
        <th>表格宽度</th>
    </tr>
    <tr>
        <th>height</th>
        <th>数字</th>
        <th>表格高度</th>
    </tr>
</table>  

<p>注意点：</p>
<ul>
   <li>实际开发时针对于样式效果推荐使用CSS</li>
</ul>

<p>代码：<code>&lt;table border=&quot; &quot; width=&quot; &quot; heigth=&quot; &quot;&gt;&lt;/table&gt;</code></p>
<h3><span id="表格的标题和表头单元格标签">表格的标题和表头单元格标签</span></h3><p>场景：在表格中表示整体大标题和一列小标题</p>
<table border="1">
<caption>其他标签</caption>
     <tr>
        <th>标签名</th>
        <th>名称</th>
        <th>说明</th>
    </tr>
    <tr>
        <th>caption</th>
        <th>表格大标题</th>
        <th>表示表格整体大标题，默认在表格整体顶部居中显示</th>
    </tr>
    <tr>
        <th>th</th>
        <th>表头单元格</th>
        <th>表示一列小标题，通常用于表格第一行，默认内部文字加粗居中显示</th>
    </tr>
</table>  

<p>注意点：</p>
<ul>
  <li>caption标签写在table标签内部</li>
  <li>th标签书写在tr标签内部(用于替换td标签)
</li></ul>

<h3><span id="表格的结构标签了解">表格的结构标签（了解）</span></h3><p>场景：让表格的内容结构分组，突出表格的不同部分（头部，主体，底部），使语义更清晰。</p>
<table border="1">
<caption>结构标签</caption>
     <tr>
        <th>标签名</th>
        <th>名称</th>
    </tr>
    <tr>
        <th>thead</th>
        <th>表格头部</th>
    </tr>
    <tr>
        <th>tbody </th>
        <th>表示主体</th>
    </tr>
    <tr>
        <th>tfoot </th>
        <th>表示底部</th>
    </tr>
</table>  

<p>注意点：</p>
<ul>
<li>表格结构标签内部用于包裹tr标签</li>
<li>表格的结构标签可以省略</li>
</ul>

<h3><span id="合并单元格">合并单元格</span></h3><p>场景：将水平或垂直的多个单元格合并。</p>
<p>合并单元格步骤：</p>
<ol>
  <li>明确合并哪几个单元格</li>
  <li>通过左上原则确定保留谁删除谁
      <ul>
         <li>上下合并只保留最上的，删除其他</li>
         <li>左右合并只保留最左的，删除其他</li>
     </ul>
  </li>
  <li>给保留的单元格设置：跨行合并和跨列合并</li>
</ol>

<table border="1">
     <tr>
         <th>属性名</th>
         <th>属性值</th>
         <th>说明</th>
    </tr>
    <tr>
         <th>rowspan</th>
         <th>合并单元格的个数</th>
         <th>跨行合并，将多行的单元格垂直合并</th>
    </tr>
    <tr>
         <th>colspan</th>
         <th>合并单元格的个数</th>
         <th>跨列合并，将多列的单元格水平合并</th>
    </tr>
</table>

<h2><span id="表单">表单</span></h2><h3><span id="input标签">input标签</span></h3><p>代码:<code>&lt;input type=&quot; &quot;&gt;</code></p>
<table border="1">
    <tr>
       <th>type</th>
       <th>说明</th>
    </tr>
    <tr>
       <th>text</th>
       <th>文本框，用于输入单行文本</th>
    </tr>
    <tr>
       <th>password</th>
       <th>密码框，用于输入密码</th>
    </tr>
    <tr>
       <th>radio</th>
       <th>单选框,多选一</th>
    </tr><tr>
       <th>checkbox</th>
       <th>多选框，多选多</th>
    </tr>
    <tr>
       <th>file</th>
       <th>文件选择，用于上传文件</th>
    </tr>
    <tr>
       <th>submit</th>
       <th>提交按钮，用于提交</th>
    </tr>
    <tr>
       <th>reset</th>
       <th>重置按钮，用于重置</th>
    </tr>
    <tr>
       <th>button</th>
       <th>普通按钮，无特殊功能,之后配合js添加功能</th>
    </tr>
</table>

<p>占位符：placeholder,用于提示用户输入。<br>代码:<code>&lt;input type=&quot; &quot; placeholder=&quot; &quot;&gt;</code></p>
<h3><span id="input单选框">input单选框</span></h3><p>场景：在网页中显示多选一的单选表单控件</p>
<p>type属性值：radio。</p>
<table border="1">
    <tr>
       <th>属性名</th>
       <th>说明</th>
    </tr>
    <tr>
       <th>name</th>
       <th>分组，有相同name属性值的单选框为一组，一组中同时只能有一个被选中</th>
    </tr>
    <tr>
       <th>checked</th>
       <th>默认选中</th>
    </tr>
</table>

<p>代码：<code>&lt;input type=&quot;radio&quot; name=&quot; &quot; checked（添加后会默认勾选该选项）&gt;</code></p>
<h3><span id="input其他属性值说明">input其他属性值说明</span></h3><h4><span id="多文件选择">多文件选择</span></h4><p>代码：<code>&lt;input type=&quot;file&quot; multiple&gt;</code></p>
<h4><span id="按钮">按钮</span></h4><p>submit:<code>&lt;input submit value=&quot; &quot;&gt;</code><br>reset: <code>&lt;input reset value=&quot; &quot;&gt;</code><br>button: </p>
<pre><code>&lt;button type=&quot;submit&quot;&gt;提交按钮&lt;/button&gt;
&lt;button type=&quot;reset&quot;&gt;重置按钮&lt;/button&gt;
&lt;button type=&quot;button&quot;&gt;普通按钮&lt;/button&gt;
</code></pre>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS进阶</title>
    <url>/2023/07/23/7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1><span id="css进阶">CSS进阶</span></h1><h2><span id="选择器">选择器</span></h2><h3><span id="后代">后代</span></h3><p>选择器语法：选择器1 选择器2{CSS}</p>
<p>结果：在选择器1所找到标签的后的中，找到满足选择器2的标签，设置样式。</p>
<p>注意点：</p>
<ol>
    <li>后代选择器中，选择器与选择器要用空格隔开。</li>
</ol>

<h3><span id="子代">子代</span></h3><p>选择器语法：选择器1&gt;选择器2{CSS}</p>
<p>结果：</p>
<ul>
    <li>在选择器1所找到标签的子代中，找到满足选择器2的标签，设置样式。</li>
</ul>

<p>注意点：</p>
<ol>
    <li>子代只包括：儿子。</li>
    <li>子代选择器中，选择器与选择器用>隔开</li>
</ol>

<h3><span id="并集">并集</span></h3><p>作用：同时选择多个标签，设置相同的格式。</p>
<p>选择器语法：选择器1，选择器2{CSS}</p>
<p>结果：</p>
<ul>
    <li>找到选择器1和2选中的标签，设置样式。</li>
</ul>


<p>注意点：</p>
<ol>
    <li>并集选择器中的每组选择器之间用，隔开</li>
    <li>并集选择器中的每组选择器可以是基础选择器或者复合选择器</li>
    <li>并集选择器中的每组选择器通常一行写一个，提高代码可读性</li>
</ol>

<h3><span id="交集">交集</span></h3><p>作用：选择页面当中同时满足多个选择器的标签。</p>
<p>选择器语法：选择器1.选择器2{CSS}</p>
<p>结果：找到页面中既能被选择器1选中，又能被选择器2选中的标签，设置样式。</p>
<p>注意点：</p>
<ol>
    <li>交集选择器中的选择器是紧挨着的，没有东西分隔。</li>
    <li>交集选择器中如果有标签选择器，标签选择器必须写在最前面</li>
</ol>

<h3><span id="伪类">伪类</span></h3><p>作用：选中鼠标悬停在元素上的状态，设置样式。</p>
<p>选择器语法：a:hover{CSS}</p>
<p>注意点：</p>
<ol>
    <li>伪类选择器选中的元素的某种状态。</li>
</ol>

<h2><span id="emmet语法">Emmet语法</span></h2><table border="1">
    <tr>
        <th>记忆</th>
        <th>示例</th>
        <th>效果</th>
    </tr>
    <tr>
        <th>类选择器</th>
        <th>.red</th>
        <th>div class="red" /div</th>
    </tr>
    <tr>
        <th>id选择器</th>
        <th>#one</th>
        <th>div id="one" /div</th>
    </tr>
    <tr>
        <th>交集选择器</th>
        <th>p.red#one</th>
        <th>p class="red" id="one" /p</th>
    </tr>
    <tr>
        <th>子代选择器</th>
        <th>ul>li</th>
        <th>ul li /li /ul</th>
    </tr>
    <tr>
        <th>内部文本</th>
        <th>ul>li{内部文本}</th>
        <th>ul li 内部文本 /li /ul</th>
    </tr>
    <tr>
        <th>创建多个</th>
        <th>ul>li*3</th>
        <th>ul li /li li /li li /li /ul</th>
    </tr>
</table>

<h2><span id="背景">背景</span></h2><p><hr></p>
<h3><span id="背景色">背景色</span></h3><p>属性名：<code>background-color(bgc)</code></p>
<p>属性值：</p>
<ul>
    <li>颜色取值：关键字，rgb表示法，rgba表示法，十六进制</li>
</ul>

<p>注意点：</p>
<ul>
    <li>背景颜色默认值是透明：rgba(0,0,0,0),transparent</li>
    <li>背景颜色不会影响盒子大小，并且能看清盒子位置，一般布局中会习惯先给盒子设置背景颜色</li>
</ul>


<h3><span id="背景图">背景图</span></h3><p>属性名：background-img(bgi)</p>
<p>属性值：<code>background-image:url(&quot;图片的路径&quot;)</code></p>
<p>注意点：</p>
<ul>
    <li>背景图片中url可以省略引号</li>
    <li>背景默认是在水平和竖直方向上平铺</li>
    <li>背景图片仅仅是指给盒子起到修饰效果，类似于背景颜色，不能改变盒子大小</li>
</ul>


<h3><span id="背景平铺">背景平铺</span></h3><p>属性名：<code>background-repeat(bgr)</code></p>
<p>属性值：</p>
<table border="1">
    <tr>
        <th>取值</th>
        <th>效果</th>
    </tr>
    <tr>
        <th>repeat</th>
        <th>（默认值）水平和竖直方向上平铺</th>
    </tr>
    <tr>
        <th>no-repeat</th>
        <th>不平铺</th>
    </tr>
    <tr>
        <th>repeat-x</th>
        <th>水平方向上平铺</th>
    </tr>
    <tr>
        <th>repeat-y</th>
        <th>竖直方向上平铺</th>
    </tr>
</table>


<h3><span id="背景位置">背景位置</span></h3><p>属性名：background-position</p>
<p>属性值：<code>background-position:水平方向位置 垂直方向位置</code></p>
<p><img src="/images/53.png" alt></p>
<p>注意点：</p>
<ul>
    <li>方向名词取值和坐标取值可以混使用，第一个取值代表水平，第二个取值表示垂直</li>
</ul>

<h3><span id="背景相关属性连写">背景相关属性连写</span></h3><p>属性名：background(bg)</p>
<p>属性值：单个属性值的合写，取值之间可以空格隔开。</p>
<p>书写顺序：</p>
<ul>
    <li>推荐：background:color image repeat position</li>
</ul>

<p>省略问题：</p>
<ul>
    <li>可以按照需求省略</li>
    <li>特殊情况：在PC端，如果盒子大小和背景图片大小一致，此时可以之间写background:url()</li>
</ul>

<p>注意点：</p>
<ul>
    <li>如果需要设置单独的样式和连写</li>
    <li>
        <ol>
            <li>要么把单独的样式写在连写的下面</li>
            <li>要么把单独的样式写在连写的里面</li><li>
        </li></ol>
    </li>
</ul>

<h2><span id="显示模式">显示模式</span></h2><h3><span id="块">块</span></h3><p>显示特点：</p>
<ol>
    <li>独占一行（一行只显示一个）</li>
    <li>宽度默认是父级元素的宽度，高度默认由内容撑开。</li>
    <li>可以设置宽高</li>
</ol>

<p>代表标签：div,p,h系列,ul,li,dl,dt,dd,form,header,nav,footer…</p>
<h3><span id="行内元素">行内元素</span></h3><p>显示特点：</p>
<ol>
    <li>一行可以显示多个</li>
    <li>宽度和高度默认由内容撑开</li>
    <li>不可以设置宽高</li>
</ol>

<p>代表标签：a,span,b,u,i,s,strong,ins,em,del…</p>
<h3><span id="行内块">行内块</span></h3><p>显示特点：</p>
<ol>
    <li>一行可以显示多个</li>
    <li>可以设置宽高</li>
</ol>

<p>代表标签：</p>
<ul>
    <li>input,textarea,button,select...</li>
    <li>特殊情况：img标签有行内块元素特点，但是Chrome调试工具中显示结果是inline</li>
</ul>

<h3><span id="转换">转换</span></h3><p>目的：改变元素默认显示特点，让元素符合布局要求</p>
<p>语法：</p>
<table border="1">
    <tr>
        <th>属性</th>
        <th>效果</th>
        <th>使用频率</th>
    </tr>
    <tr>
        <th>display:block</th>
        <th>转换成块级元素</th>
        <th>较多</th>
    </tr>
    <tr>
        <th>display:inline-block</th>
        <th>转换成行内快元素</th>
        <th>较多</th>
    </tr>
    <tr>
        <th>display:inline</th>
        <th>转换成行内元素</th>
        <th>较少</th>
    </tr>
</table>

<h3><span id="标签嵌套">标签嵌套</span></h3><p>1.块级元素一般作为大容器，可以嵌套：文本，块级元素，行内元素，行内块元素等等…<br>    但是：p标签不能嵌套div,p,h标签<br>2.a标签内可以嵌套任意元素<br>    但是：a标签不能嵌套a标签</p>
<h2><span id="组成">组成</span></h2><p>CSS中规定每个盒子分别由：内容区域(content),内边距区域(padding),边框区域(border),外边框区域(margin)构成</p>
<h3><span id="border使用方法">border使用方法</span></h3><p>属性值：单个取值连写，用空格隔开<br>如：border:10px solid red;</p>
<p>快捷键：bd+tab</p>
<h3><span id="padding">padding</span></h3><p>属性值:</p>
<ul>
    <li>padding: 10px 20px 30px 40px;(四值：上 右 下 左)</li>
    <li>padding: 10px 20px 30px;(三值：上 左右 下)</li>
    <li>padding: 10px 80px(两值：上下 左右)</li>
</ul>

<h3><span id="内减模式">内减模式</span></h3><p>自动内减：</p>
<ul>
    <li>操作方法：给盒子设置属性box-sizing: border-box;即可</li>
    <li>优点：浏览器会自动计算多余大小，自动在内容中减去</li>
</ul>


<h2><span id="css浮动">CSS浮动</span></h2><h3><span id="结构伪类">结构伪类</span></h3><p>目标：能够使用结构伪类选择器在HTML中定位元素</p>
<p>1.作用与优势</p>
<ol>
    <li>作用：根据元素在HTML中的结构关系查找元素</li>
    <li>优势：减少对于HTML中类的依赖，有利于保持代码整洁</li>
    <li>场景：常用于查找某父级选择器中的子元素</li>
</ol>

<p>2.选择器</p>
<table>
    <tr>
        <th>选择器</th>
        <th>说明</th>
    </tr>
    <tr>
        <th>E:first-child{}</th>
        <th>匹配父级元素的第一个子元素，并且是E元素</th>
    </tr>
    <tr>
        <th>E:last-child{}</th>
        <th>匹配父级元素的最后一个子元素，并且是E元素</th>
    </tr>
    <tr>
        <th>E:nth-child(n){}</th>
        <th>匹配父级元素中的第n个元素，并且是E元素</th>
    </tr>
    <tr>
        <th>E:nth-last-child(n){}</th>
        <th>匹配父级元素中的倒数第n个元素，并且是E元素</th>
    </tr>
</table>

<p>3.公式</p>
<p>n的注意点：</p>
<ul>
    <li>n为：0,1,2,3,4,5,6...</li>
    <li>通过n可以组成常见公式</li>
</ul>

<table>
    <tr>
        <th>功能</th>
        <th>公式</th>
    </tr>
    <tr>
        <th>偶数</th>
        <th>2n,even</th>
    </tr>
    <tr>
        <th>奇数</th>
        <th>2n+1,2n-1,odd</th>
    </tr>
    <tr>
        <th>找到前5个</th>
        <th>-n+5</th>
    </tr>
    <tr>
        <th>找到从第5个往后</th>
        <th>n+5</th>
    </tr>
</table>

<h3><span id="伪元素">伪元素</span></h3><p>伪元素：一般页面中的非主体内容可以使用为元素</p>
<p>种类：</p>
<table>
    <tr>
        <th>伪元素</th>
        <th>作用</th>
    </tr>
    <tr>
        <th>::before</th>
        <th>在父元素内容的最前添加一个伪元素</th>
    </tr>
    <tr>
        <th>::after</th>
        <th>在父元素内容的最后添加一个伪元素</th>
    </tr>
</table>

<p>注意点：</p>
<ol>
    <li>必须设置content属性才能生效</li>
    <li>伪元素必须是行内元素</li>
</ol>

<h3><span id="清除浮动">清除浮动</span></h3><p>1.额外标签<br>操作：</p>
<ol>
    <li>在父级元素内容的最后添加一个块级元素</li>
    <li>给添加的块级元素设置clear:both</li>
</ol>

<p>2.单伪元素</p>
<p>基本写法：<br><code>.clearfix::after&#123;
    content:&#39;&#39;;
    display:block;
    clear:both;
&#125;</code></p>
<p>补充写法：<br><code>.clearfix::after&#123;
    content:&#39;&#39;;
    display:block;
    clear:both;
    height:0;
    visibility:hidden;
&#125;</code></p>
<p>3.双伪元素</p>
<p>操作：<br><code>.clearfix::before
 .claerfix::after&#123;
    content:&#39;&#39;;
    display:table;
&#125;</code></p>
<p>4.overflow</p>
<p>操作：直接给父级元素设置<code>overflow:hidden;</code></p>
<p>特点：方便。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>51单片机基础</title>
    <url>/2023/07/09/6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1><span id="单片机基础">单片机基础</span></h1><h2><span id="led灯">LED灯</span></h2><h3><span id="点亮一个led">点亮一个LED</span></h3><p>代码：</p>
<pre><code>#include &lt;REGX52.H&gt;
void main()
&#123;
    P2=0xFE;
&#125;
</code></pre><h3><span id="led灯闪烁">LED灯闪烁</span></h3><p>代码：</p>
<pre><code>#include &lt;REGX52.H&gt;
#include &lt;INTRINS.H&gt;
//
void Delay500ms()        
&#123;
    unsigned char i, j, k;

    _nop_();
    i = 4;
    j = 205;
    k = 187;
    do
    &#123;
        do
        &#123;
            while (--k);
        &#125; while (--j);
    &#125; while (--i);
&#125;


void main()
&#123;
    P2=0xFE;
    Delay500ms();
    P2=0xFF;
    Delay500ms();
&#125;
</code></pre><h3><span id="流水灯">流水灯</span></h3><p>代码：</p>
<pre><code>#include &lt;REGX52.H&gt;

void Delay1ms(unsigned int xms)        
&#123;
    unsigned char i, j;
    while(xms)
    &#123;
        i = 2;
        j = 239;
        do
        &#123;
            while (--j);
        &#125; while (--i);
        xms--;
    &#125;
&#125;

void main()
&#123;
    unsigned char num=0;
    while(1)
    &#123;
        P2=~(0x01&lt;&lt;num);
        Delay1ms(500);
        num++;
        if(num&gt;=8)
            num=0;
    &#125;
&#125;
</code></pre><h3><span id="独立按键控制led亮灭">独立按键控制LED亮灭</span></h3><p>代码：</p>
<pre><code>#include &lt;REGX52.H&gt;

void main()
&#123;
    while(1)
    &#123;
        if(P3_1==0)
        &#123;
            P2_0=0;
        &#125;
        else
        &#123;
            P2_0=1;
        &#125;
    &#125;
&#125;
</code></pre><h3><span id="独立按键控制led状态">独立按键控制LED状态</span></h3><p>代码：</p>
<pre><code>#include &lt;REGX52.H&gt;

void Delay(unsigned int xms)        
&#123;
    unsigned char data i, j;
    while(xms--)
    &#123;
        i = 2;
        j = 239;
        do
        &#123;
            while (--j);
        &#125; while (--i);
    &#125;
&#125;

void main()
&#123;
    while(1)
    &#123;
        if(P3_1==0)
        &#123;
            Delay(20);
            while(P3_1==0);
            Delay(20);
            P2_0=~P2_0;
        &#125;
    &#125;
&#125;
</code></pre><h3><span id="独立按键控制led显示二进制">独立按键控制LED显示二进制</span></h3><p>代码：</p>
<pre><code>#include &lt;REGX52.H&gt;

void Delay(unsigned int xms)        
&#123;
    unsigned char data i, j;
    while(xms--)
    &#123;
        i = 2;
        j = 239;
        do
        &#123;
            while (--j);
        &#125; while (--i);
    &#125;
&#125;
void main()
&#123;
    unsigned char num=0;
    while(1)
    &#123;
        if(P3_1==0)
        &#123;
            Delay(20);
            while(P3_1==0);
            Delay(20);
            num++;
            P2=~num;
        &#125;
    &#125;
&#125;
</code></pre><h3><span id="独立按键控制led移位">独立按键控制LED移位</span></h3><p>代码：</p>
<pre><code>#include &lt;REGX52.H&gt;

void Delay(unsigned int xms)        
&#123;
    unsigned char data i, j;
    while(xms--)
    &#123;
        i = 2;
        j = 239;
        do
        &#123;
            while (--j);
        &#125; while (--i);
    &#125;
&#125;

void main()
&#123;
    unsigned char num=0;
    P2=~0x01;
    while(1)
    &#123;
        if(P3_1==0)
        &#123;
            Delay(20);
            while(P3_1==0);
            Delay(20);
            num++;
            if(num&gt;=8)
            &#123;
                num=0;
            &#125;
            P2=~(0x01&lt;&lt;num);
        &#125;
        if(P3_0==0)
            &#123;
                Delay(20);
                while(P3_0==0);
                Delay(20);
                if(num==0)
                    num=7;
                else
                    num--;
                P2=~(0x01&lt;&lt;num);
            &#125;
    &#125;
&#125;
</code></pre><h2><span id="数码管显示">数码管显示</span></h2><h3><span id="静态显示">静态显示</span></h3><p>代码：</p>
<pre><code>#include &lt;REGX52.H&gt;

unsigned char number[]=&#123;0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F&#125;;

void LED(unsigned char location,num)
&#123;
    switch(location)
    &#123;
        case 1:P2_4=1;P2_3=1;P2_2=1;break;
        case 2:P2_4=1;P2_3=1;P2_2=0;break;
        case 3:P2_4=1;P2_3=0;P2_2=1;break;
        case 4:P2_4=1;P2_3=0;P2_2=0;break;
        case 5:P2_4=0;P2_3=1;P2_2=1;break;
        case 6:P2_4=0;P2_3=1;P2_2=0;break;
        case 7:P2_4=0;P2_3=0;P2_2=1;break;
        case 8:P2_4=0;P2_3=0;P2_2=0;break;
    &#125;
    P0=number[num];
&#125;

void main()
&#123;
    LED(6,9);
    while(1)
    &#123;

    &#125;
&#125;
</code></pre><h3><span id="动态显示">动态显示</span></h3><p>代码：</p>
<pre><code>#include &lt;REGX52.H&gt;

unsigned char number[]=&#123;0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F&#125;;

void Delay(unsigned char xms)        
&#123;
    unsigned char data i, j;
    while(xms--)
    &#123;
        i= 2;
        j = 239;
        do
        &#123;
            while (--j);
        &#125; while (--i);
    &#125;
&#125;

void LED(unsigned char location,num)
&#123;
    switch(location)
    &#123;
        case 1:P2_4=1;P2_3=1;P2_2=1;break;
        case 2:P2_4=1;P2_3=1;P2_2=0;break;
        case 3:P2_4=1;P2_3=0;P2_2=1;break;
        case 4:P2_4=1;P2_3=0;P2_2=0;break;
        case 5:P2_4=0;P2_3=1;P2_2=1;break;
        case 6:P2_4=0;P2_3=1;P2_2=0;break;
        case 7:P2_4=0;P2_3=0;P2_2=1;break;
        case 8:P2_4=0;P2_3=0;P2_2=0;break;
    &#125;
    P0=number[num];
    Delay(1);
    P0=0x00;
&#125;

void main()
&#123;
    while(1)
    &#123;
        LED(1,1);
        LED(2,2);
        LED(3,3);
    &#125;
&#125;
</code></pre><h2><span id="位运算">位运算</span></h2><p>运算符:<br><code>&lt;&lt; :按位左移</code><br>0011 1100&lt;<1 -> 0111 1000</1></p>
<p><code>&gt;&gt; :按位右移</code><br>0011 1100&lt;<2 -> 0000 1111</2></p>
<p><code>&amp; :按位与</code><br>0001 1000 &amp; 0010 1010 -&gt; 0000 1000</p>
<p><code>| :按位或</code><br>0001 1000 | 0010 1010 -&gt; 0011 1010</p>
<p><code>^ :按位异或</code><br>0001 1000 ^ 0010 1010 -&gt; 0011 0010<br><code>~ : 按位取反</code><br>~0001 1000 -&gt; 1110 0111</p>
<h2><span id="lcd1602调试工具">LCD1602调试工具</span></h2><table border="1">
    <tr>
        <th>函数</th>
        <th>作用</th>
    </tr>
    <tr>
        <th>LCD_Init();</th>
        <th>初始化</th>
    </tr>
    <tr>
        <th>LCD_ShowChar(1,1,'A');</th>
        <th>显示一个字符</th>
    </tr>
    <tr>
        <th>LCD_ShowString(1,3,"hello");</th>
        <th>显示字符串</th>
    </tr>
    <tr>
        <th>LCD_ShowNum(1,9,123,3);</th>
        <th>显示十进制数字</th>
    </tr>
    <tr>
        <th>LCD_ShowSignedNum(1,13,-66,2);</th>
        <th>显示有符号的十进制数字</th>
    </tr>
    <tr>
        <th>LCD_ShowHexNum(2,1,0xA8,2);</th>
        <th>显示16进制数字</th>
    </tr>
    <tr>
        <th>LCD_ShowBinNum(2,4,0xAA,8);</th>
        <th>显示二进制数字</th>
    </tr>
</table>

<h2><span id="矩阵键盘">矩阵键盘</span></h2><p>代码：</p>
<pre><code>#include &lt;REGX52.H&gt;
#include &quot;LCD1602.h&quot;
#include &quot;MatrixKey.h&quot;
#include &quot;Delay.h&quot;

unsigned char number=0;
void main()
&#123;

    LCD_Init();
    LCD_ShowString(1,1,&quot;MatrixKeynumber&quot;);
    while(1)
    &#123;
        number=keynumber();
        if(number)
        LCD_ShowNum(2,1,number,2);
    &#125;
&#125;
</code></pre><p>MatrixKey文件代码：</p>
<pre><code>#include &lt;REGX52.H&gt;
#include &quot;Delay.h&quot;

unsigned char keynumber()
&#123;
    unsigned char num=0;

    P1=0xFF;
    P1_3=0;
    if(P1_7==0)&#123;Delay(20);while(P1_7==0);Delay(20);num=1;&#125;
    if(P1_6==0)&#123;Delay(20);while(P1_6==0);Delay(20);num=5;&#125;
    if(P1_5==0)&#123;Delay(20);while(P1_5==0);Delay(20);num=9;&#125;
    if(P1_4==0)&#123;Delay(20);while(P1_4==0);Delay(20);num=13;&#125;
    P1=0xFF;
    P1_2=0;
    if(P1_7==0)&#123;Delay(20);while(P1_7==0);Delay(20);num=2;&#125;
    if(P1_6==0)&#123;Delay(20);while(P1_6==0);Delay(20);num=6;&#125;
    if(P1_5==0)&#123;Delay(20);while(P1_5==0);Delay(20);num=10;&#125;
    if(P1_4==0)&#123;Delay(20);while(P1_4==0);Delay(20);num=14;&#125;
    P1=0xFF;
    P1_1=0;
    if(P1_7==0)&#123;Delay(20);while(P1_7==0);Delay(20);num=3;&#125;
    if(P1_6==0)&#123;Delay(20);while(P1_6==0);Delay(20);num=7;&#125;
    if(P1_5==0)&#123;Delay(20);while(P1_5==0);Delay(20);num=11;&#125;
    if(P1_4==0)&#123;Delay(20);while(P1_4==0);Delay(20);num=15;&#125;
    P1=0xFF;
    P1_0=0;
    if(P1_7==0)&#123;Delay(20);while(P1_7==0);Delay(20);num=4;&#125;
    if(P1_6==0)&#123;Delay(20);while(P1_6==0);Delay(20);num=8;&#125;
    if(P1_5==0)&#123;Delay(20);while(P1_5==0);Delay(20);num=12;&#125;
    if(P1_4==0)&#123;Delay(20);while(P1_4==0);Delay(20);num=16;&#125;
    return num;
&#125;
</code></pre><h2><span id="矩阵键盘密码锁">矩阵键盘密码锁</span></h2><p>代码：</p>
<pre><code>#include &lt;REGX52.H&gt;
#include &quot;LCD1602.h&quot;
#include &quot;Delay.h&quot;
#include &quot;MatrixKey.h&quot;

unsigned char num=0;
unsigned int password=0,count=0;
void main()
&#123;
    LCD_Init();
    LCD_ShowString(1,1,&quot;password:&quot;);
    while(1)
    &#123;
        num=keynumber();
        if(num)
        &#123;
            if(num&lt;=10)
            &#123;
                if(count&lt;4)
                &#123;
                    password*=10;
                    password+=num%10;
                    count++;
                &#125;
                LCD_ShowNum(2,1,password,4);
            &#125;
            if(num==11)
            &#123;
                if(password==2345)
                &#123;
                    LCD_ShowString(1,14,&quot;OK &quot;);
                    password=0;
                    count=0;
                    LCD_ShowNum(2,1,password,4);
                &#125;
                else 
                &#123;
                    LCD_ShowString(1,14,&quot;err&quot;);
                    password=0;
                    count=0;
                    LCD_ShowNum(2,1,password,4);
                &#125;
            &#125;
            if(num==12)
            &#123;
                password/=10;
                count--;
                LCD_ShowNum(2,1,password,4);
            &#125;
        &#125;
    &#125;
&#125;
</code></pre>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>单片机</tag>
      </tags>
  </entry>
  <entry>
    <title>JS-API</title>
    <url>/2023/08/18/8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1><span id="apis">APIs</span></h1><h2><span id="dom">DOM</span></h2><h3><span id="获取dom元素">获取DOM元素</span></h3><p>1.选择匹配第一个元素</p>
<p>语法：<code>document.querySelector(&#39;css选择器&#39;)</code></p>
<p>2.选择匹配多个元素</p>
<p>例如：<code>document.querySelectorAll(&#39;ul li&#39;)</code></p>
<p>得到的是一个伪数组：</p>
<ul>
    <li>有长度索引号的数组</li>
    <li>但是没有pop(),push()等数组方法</li>
</ul>

<p>想要得到里面的每一个对象，则需要遍历(for)数组</p>
<h3><span id="修改元素内容">修改元素内容</span></h3><p>1.inner.Text</p>
<p>语法：<code>box.innerText=&#39;输入内容&#39;</code></p>
<p>2，innerHTML</p>
<p>语法：<code>box.innerHTML=&#39;输入内容&#39;</code></p>
<h3><span id="修改元素属性">修改元素属性</span></h3><p>最常见的属性比如：href,title,src等</p>
<p>语法：<code>对象.属性=值</code></p>
<h2><span id="事件监听">事件监听</span></h2><p>语法：<code>元素对象.addEventListener(&#39;事件类型,要执行的函数)</code></p>
<p>事件监听三要素：</p>
<ul>
    <li>事件源：那个dom元素被事件触发了，要获取dom元素</li>
    <li>事件类型：用什么方法触发，比如鼠标点击click，鼠标经过mouseover</li>
    <li>事件调用函数：要做什么事</li>
</ul>

<h3><span id="事件类型">事件类型</span></h3><p>鼠标事件：</p>
<ul>
    <li>click 鼠标点击</li>
    <li>mouseenter 鼠标经过</li>
    <li>mouseleave 鼠标离开</li>
</ul>

<p>焦点事件：</p>
<ul>
    <li>focus 获得焦点</li>
    <li>blur 失去焦点</li>
</ul>

<p>键盘事件：</p>
<ul>
    <li>keydown 键盘按下触发</li>
    <li>keyup 键盘抬起触发</li>
</ul>

<p>文本事件：</p>
<ul>
    <li>input 用户输入事件</li>
</ul>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>css基础</title>
    <url>/2023/07/02/5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1><span id="css基础">css基础</span></h1><h2><span id="css常见引入方式">css常见引入方式</span></h2><table border="1">
    <tr>
       <th>引入方式</th>
       <th>书写位置</th>
       <th>作用范围</th>
       <th>使用场景</th>
    </tr>
    <tr>
       <th>内嵌式</th>
       <th>css写在style标签内</th>
       <th>当前页面</th>
       <th>小案例</th>
    </tr>
    <tr>
       <th>外嵌式</th>
       <th>CSS单独写在css文件中,通过link标签引入</th>
       <th>多个页面</th>
       <th>项目中</th>
    </tr>
    <tr>
       <th>行内式</th>
       <th>CSS写在标签的style属性中</th>
       <th>当前页面</th>
       <th>配合js使用</th>
    </tr>
</table>

<h2><span id="选择器">选择器</span></h2><h3><span id="标签">标签</span></h3><p>以标签名命名的选择器,选中所有的这个标签都生效CSS。</p>
<h3><span id="类">类</span></h3><p>结构：.类名{ CSS属性名：属性值}<br>作用：通过类名，找到页面中所有带这个类名的标签<br>注意点：</p>
<ol>
 <li>所有标签上都有class属性，class属性的属性值为类名(类似于名字)</li>
 <li>类名可以有数字，字母，下划线组成，但不能以数字和中划线开头</li>
 <li>一个标签有多个类名，类名之间用空格分开</li>
 <li>类名可以重复，一个类选择器可以同时选中多个标签</li>
</ol>

<h3><span id="id">id</span></h3><p>结构：#属性名{ CSS属性名：属性值}<br>一个网页中只能存在一个id</p>
<h3><span id="通配符">通配符</span></h3><p>结构:*{CSS属性性名：属性值}<br>通配符会作用在该网页的全部标签上。</p>
<h2><span id="文字样式">文字样式</span></h2><p>字体大小：font-size<br>取值：大小+px；<br>字体粗细：font-weight<br>取值：</p>
<ul>
    <li>关键字：</li>
     <table>
     <tr>
        <th>正常</th>
        <th>normal</th>
    </tr>
    <tr>
       <th>加粗</th>
       <th>blod</th>
    </tr>
    </table>
    <li>纯数字：100-900的整百数：</li>
    <table>
    <tr>
       <th>正常</th>
       <th>400</th>
    </tr>
    <tr>
       <th>加粗</th>
       <th>700</th>
    </tr>
    </table>
</ul>

<h3><span id="font复合属性">font复合属性</span></h3><p>属性名：font(复合属性)<br>取值：font:style weight size family<br>只能省略前两个，相当设置了默认值</p>
<h2><span id="文本标签">文本标签</span></h2><h3><span id="文本缩进">文本缩进</span></h3><p>属性名：text-indent<br>取值：</p>
<ul>
    <li>数字+px</li>
    <li>数字+em(推荐：1em=当前标签的font-size的大小)</li>
</ul>

<p>代码：</p>
<pre><code>p&#123;
    text-indent:
&#125;
</code></pre><h3><span id="水平对齐">水平对齐</span></h3><p>属性名：text-align<br>取值：</p>
<table>
    <tr>
       <th>属性值</th>
       <th>效果</th>
    </tr>
    <tr>
       <th>left</th>
       <th>左对齐</th>
    </tr>
    <tr>   
       <th>center</th>
       <th>居中对齐</th>
    </tr>
    <tr>
       <th>right</th>
       <th>右对齐</th>
    </tr>
</table>

<h3><span id="文本修饰">文本修饰</span></h3><p>属性名：text-decoration<br>取值：</p>
<table>
    <tr>
       <th>属性值</th>
       <th>效果</th>
    </tr>
    <tr>
       <th>underline</th>
       <th>下划线(常用)</th>
    </tr>
    <tr>   
       <th>line-through</th>
       <th>删除线</th>
    </tr>
    <tr>
       <th>overline</th>
       <th>上划线</th>
    </tr>
    <tr>
       <th>none</th>
       <th>无装饰线</th>
    </tr>
</table>

<h2><span id="拓展">拓展</span></h2><p>水平居中：margin:0 auto</p>
<p>层叠性：同一属性值，后写的会覆盖先写的。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>html基础知识(一)</title>
    <url>/2023/06/07/html/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1><span id="html基本框架">HTML基本框架</span></h1><p>代码：</p>
<pre><code>&lt;html&gt;
&lt;head&gt;
&lt;tittle&gt;网页的标题&lt;/tittle&gt;
&lt;/head&gt;
&lt;body&gt;
网页的主题内容
&lt;/body&gt;
&lt;/html&gt;
</code></pre><h1><span id="html标签">HTML标签</span></h1><h2><span id="标题">标题</span></h2><pre><code>&lt;h1&gt;一级标题&lt;/h1&gt;
&lt;h2&gt;二级标题&lt;/h2&gt;
</code></pre><p>依此类推，一共有6级标题</p>
<h2><span id="段落">段落</span></h2><pre><code>&lt;body&gt;
&lt;p&gt;段落内容&lt;/p&gt;
&lt;/body&gt;
</code></pre><h2><span id="换行与水平线">换行与水平线</span></h2><p>换行符：<code>&lt;br&gt;</code><br>水平线：<code>&lt;hr&gt;</code></p>
<h2><span id="文本格式化标签">文本格式化标签</span></h2><p><img src="/images/16.jpg" alt></p>
<h1><span id="图片的基本使用">图片的基本使用</span></h1><h2><span id="图片的标签">图片的标签</span></h2><pre><code>&lt;img src=&quot;图片的地址&quot; alt=&quot;图片无法加载时显示的内容&quot; tittle=&quot;鼠标悬停时显示&quot; width=&quot; &quot; height=&quot; &quot;&gt;
</code></pre><p>如果只设置了width或height中的一个，另一个会自动等比例缩放。</p>
<h2><span id="路径">路径</span></h2><h2><span id="绝对路径">绝对路径</span></h2><p>指根目录下的绝对位置，可以直接到达目标位置，通常从盘符开始的路径。<br>例如：<br>     盘符开头：<code>D:\example\images\1.jpg</code><br>     完整网络地址：<code>https://example.com/images/1.jpg</code></p>
<h2><span id="相对路径">相对路径</span></h2><h3><span id="同级与下级">同级与下级</span></h3><p>  同级：<code>&lt;img src=&quot;1.jpg&quot;&gt;</code><br>  下级：<code>&lt;img src=&quot;images/1.jpg&quot;&gt;</code></p>
<h3><span id="上级">上级</span></h3><p>  <code>&lt;img src=&quot;../images/1.jpg&quot;&gt;</code></p>
<h1><span id="音频标签">音频标签</span></h1><p> 代码：<code>&lt;audio src=&quot;./music.mp3&quot; controls&gt;&lt;/audio&gt;</code><br> <img src="/images/18.png" alt></p>
<h1><span id="视频标签">视频标签</span></h1><p> 代码：<code>&lt;video src=&quot;./video.mp4&quot; controls&gt;&lt;/video&gt;</code><br> <img src="/images/19.png" alt></p>
<h1><span id="超链接">超链接</span></h1><p> 代码：<code>&lt;a href=&quot;./目标网页.html&quot;&gt;</code>目标网页<code>&lt;/a&gt;</code><br> <code>&lt;a href=&quot;#&quot;&gt;</code>空连接，不知道到哪里去<code>&lt;/a&gt;</code><br> target属性值：<code>&lt;a href=&quot;./网页地址.html&quot; target=&quot; &quot;&gt;&lt;/a&gt;</code><br> <img src="/images/20.png" alt></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo+github博客搭建教程</title>
    <url>/2023/05/30/new/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1><span id="一-配置环境"><strong>一、配置环境</strong></span></h1><p>Git(<a href="https://git-scm.com/">https://git-scm.com/</a>)</p>
<p>安装时一直next就行。</p>
<p>node.js(<a href="https://nodejs.cn/download/">https://nodejs.cn/download/</a>)</p>
<h1><span id="二-注册github和创建资源库"><strong>二、注册GitHub和创建资源库</strong></span></h1><p>GitHub官网(<a href="https://github.com/">https://github.com/</a>)</p>
<p><img src="/images/2.jpg" alt><br><img src="/images/3.jpg" alt><br><img src="/images/4.jpg" alt><br><img src="images/5.jpg" alt></p>
<h1><span id="三-本地配置安装hexo"><strong>三、本地配置安装Hexo</strong></span></h1><p>首先创建文件夹取名为blog，然后进入文件夹，点击鼠标右键选择Git Bash Here<br>然后输入 $  npm install hexo-cli -g</p>
<p>完成后在输入 $ hexo init<br>(完成后文件夹中会出现许多文件)</p>
<h1><span id="四-生成与绑定ssh秘钥"><strong>四、生成与绑定ssh秘钥</strong></span></h1><h2><span id="1生成ssh秘钥"><strong>1.生成ssh秘钥</strong></span></h2><p>输入命令 $ ssh-keygen -t rsa -C “注册github时的邮箱地址”(输入完成后按四次回车键，然后会有.ssh文件的地址)</p>
<p>接着去c盘查看,然后用记事本打开id_rsa.put文件并复制(直接双击是无法查看文件的，一定要用记事本打开!)</p>
<h2><span id="2绑定秘钥"><strong>2.绑定秘钥</strong></span></h2><p><img src="/images/6.jpg" alt><br><img src="/images/7.jpg" alt></p>
<p>完成后可以输入命令 $ ssh -T git@github.com 并且输入yes之后，行末尾会显示你的用户名</p>
<p>（绑定成功邮箱会收到邮件提醒）<br><img src="/images/9.png" alt></p>
<p>接着在本地绑定与Github的用户名和邮箱<br>输入命令：$ git config —global user.name “注册时用户名”<br>输入命令：$ git config —global user.email “注册时邮箱”</p>
<h1><span id="五-上传博客"><strong>五、上传博客</strong></span></h1><p>打开blog文件夹下的_config.yml<br><img src="/images/8.jpg" alt><br>然后将文章末尾改为以下格式：<br>deploy:<br>        type: git<br>        repo: <a href="https://github.com/用户名/用户名.github.io.git">https://github.com/用户名/用户名.github.io.git</a><br>        branch: main<br>(注意空格)<br>接着需要安装一个上传工具<br>接着输入命令：npm install hexo-deployer-git<br>然后依次输入命令：hexo cl<br>                hexo g<br>                hexo d<br>出现下图就表示上传成功了！<br><img src="/images/10.png" alt></p>
<p>注意<br>如果出现如图错误网络报错，再次尝试，多次尝试，直到更换WiFi~~~~</p>
<p><img src="/images/11.png" alt><br>然后就可以通过 用户名.github.io访问博客了。</p>
<p><strong>注意二</strong><br>如果输入命令 hexo d后，git的命令栏只有一行：INFO Validating config<br>可以依次输入下列命令：git init<br>                    git add .<br>                    git commit -m “my blog first commit”<br>                    git remote add origin “远端github仓库地址”<br>                    git branch -M main<br>然后在输入一遍 hexo d</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>绫华！</title>
    <url>/2023/05/27/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/images/1.jpg" alt></p>
]]></content>
      <categories>
        <category>二次元</category>
      </categories>
      <tags>
        <tag>图片</tag>
      </tags>
  </entry>
  <entry>
    <title>5G知识点</title>
    <url>/2023/09/16/9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1><span id="5g知识点">5G知识点</span></h1><h2><span id="1理论知识">1.理论知识</span></h2><h3><span id="11基站核心网">1.1基站，核心网</span></h3><p>5G基站：5GC，5G核心网：gNB,<br>4G基站：EPC，4G核心网：eNB,<br>若是把 5G 的基站接入到 4G 的核心网中，则构<br>成核心网: EPC,基站: en-gNB<br>若是把 4G 的基站接入到 5G 的核心网中，则构<br>成核心网: 5GC， 基站: ng-eNB</p>
<p>上行速度：指移动终端向基站发送信息时的数据传输速率，好比手机、笔记本等无线终端<br>给基站传输数据速率;</p>
<p>下行速率:是指基站向移动终端发送信息时的<br>传输速率，好比手机或笔记本等无线终端从基<br>站或者网络下载数据的速率。</p>
<h3><span id="12-5g三大应用场景-embburllcmmtc">1.2 5G三大应用场景 eMBB，URLLC,mMTC</span></h3><p>1.超可靠低延时通讯（简称URLLC），是3GPP定义的一种5G特性标准。<br>该特征被用于对时延和可靠性具备极高要求的工业，物联网应用场景，如自动驾驶，<br>智能电网，VR，工厂自动化等领域。5G中的URLLC技术还未实现商用。</p>
<p>2.eMBB，加强移动宽带，是指在现有移动宽度业务场景的基础上，对于用户体验等<br>性能进一步提高。在3GPP RAN187次会议上，由华为公司主推<br>的Polar Code（极化码）方案，成为5G控制信道eMBB场景编码最终方案。</p>
<p>3.mMTC,海量机器类通讯(大规模物联网)<br>主要用于人和物之间的信息交互。</p>
<p>4.5G 八大关键能力:</p>
<ul>
    <li>流量密度、链接数密度、时延、移动性、能效、用户体验速率、频谱效率、峰值效率</li>
</ul>

<h3><span id="13速率">1.3速率</span></h3><p>C=B*log2(1+S/N)</p>
<ul>
    <li>C：信道容量</li>
    <li>B：带宽</li>
    <li>C是数据速率的极限值，单位bit/s,B是信道带宽，单位HZ,S是信号功率（瓦），N是噪声功率（瓦）</li>
    <li>当讨论信噪比时，常以分贝（db）为单位。公式如下：SNR（信噪比，单位db）=10lg(S/N)。</li>
</ul>

<h3><span id="14-时延">1.4 时延</span></h3><ol>
    <li>网站/应用的所在机房的网络质量;</li>
    <li>本地宽带的网络质量;</li>
    <li>从本地访问至网站所通过的节点数量;</li>
</ol>]]></content>
      <categories>
        <category>大唐杯</category>
      </categories>
      <tags>
        <tag>5G</tag>
      </tags>
  </entry>
</search>
