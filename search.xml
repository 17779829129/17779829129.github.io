<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>51单片机基础</title>
      <link href="/2023/07/09/6/"/>
      <url>/2023/07/09/6/</url>
      
        <content type="html"><![CDATA[<h1 id="单片机基础"><a href="#单片机基础" class="headerlink" title="单片机基础"></a>单片机基础</h1><h2 id="LED灯"><a href="#LED灯" class="headerlink" title="LED灯"></a>LED灯</h2><h3 id="点亮一个LED"><a href="#点亮一个LED" class="headerlink" title="点亮一个LED"></a>点亮一个LED</h3><p>代码：</p><pre><code>#include &lt;REGX52.H&gt;void main()&#123;    P2=0xFE;&#125;</code></pre><h3 id="LED灯闪烁"><a href="#LED灯闪烁" class="headerlink" title="LED灯闪烁"></a>LED灯闪烁</h3><p>代码：</p><pre><code>#include &lt;REGX52.H&gt;#include &lt;INTRINS.H&gt;//void Delay500ms()        &#123;    unsigned char i, j, k;    _nop_();    i = 4;    j = 205;    k = 187;    do    &#123;        do        &#123;            while (--k);        &#125; while (--j);    &#125; while (--i);&#125;void main()&#123;    P2=0xFE;    Delay500ms();    P2=0xFF;    Delay500ms();&#125;</code></pre><h3 id="流水灯"><a href="#流水灯" class="headerlink" title="流水灯"></a>流水灯</h3><p>代码：</p><pre><code>#include &lt;REGX52.H&gt;void Delay1ms(unsigned int xms)        &#123;    unsigned char i, j;    while(xms)    &#123;        i = 2;        j = 239;        do        &#123;            while (--j);        &#125; while (--i);        xms--;    &#125;&#125;void main()&#123;    unsigned char num=0;    while(1)    &#123;        P2=~(0x01&lt;&lt;num);        Delay1ms(500);        num++;        if(num&gt;=8)            num=0;    &#125;&#125;</code></pre><h3 id="独立按键控制LED亮灭"><a href="#独立按键控制LED亮灭" class="headerlink" title="独立按键控制LED亮灭"></a>独立按键控制LED亮灭</h3><p>代码：</p><pre><code>#include &lt;REGX52.H&gt;void main()&#123;    while(1)    &#123;        if(P3_1==0)        &#123;            P2_0=0;        &#125;        else        &#123;            P2_0=1;        &#125;    &#125;&#125;</code></pre><h3 id="独立按键控制LED状态"><a href="#独立按键控制LED状态" class="headerlink" title="独立按键控制LED状态"></a>独立按键控制LED状态</h3><p>代码：</p><pre><code>#include &lt;REGX52.H&gt;void Delay(unsigned int xms)        &#123;    unsigned char data i, j;    while(xms--)    &#123;        i = 2;        j = 239;        do        &#123;            while (--j);        &#125; while (--i);    &#125;&#125;void main()&#123;    while(1)    &#123;        if(P3_1==0)        &#123;            Delay(20);            while(P3_1==0);            Delay(20);            P2_0=~P2_0;        &#125;    &#125;&#125;</code></pre><h3 id="独立按键控制LED显示二进制"><a href="#独立按键控制LED显示二进制" class="headerlink" title="独立按键控制LED显示二进制"></a>独立按键控制LED显示二进制</h3><p>代码：</p><pre><code>#include &lt;REGX52.H&gt;void Delay(unsigned int xms)        &#123;    unsigned char data i, j;    while(xms--)    &#123;        i = 2;        j = 239;        do        &#123;            while (--j);        &#125; while (--i);    &#125;&#125;void main()&#123;    unsigned char num=0;    while(1)    &#123;        if(P3_1==0)        &#123;            Delay(20);            while(P3_1==0);            Delay(20);            num++;            P2=~num;        &#125;    &#125;&#125;</code></pre><h3 id="独立按键控制LED移位"><a href="#独立按键控制LED移位" class="headerlink" title="独立按键控制LED移位"></a>独立按键控制LED移位</h3><p>代码：</p><pre><code>#include &lt;REGX52.H&gt;void Delay(unsigned int xms)        &#123;    unsigned char data i, j;    while(xms--)    &#123;        i = 2;        j = 239;        do        &#123;            while (--j);        &#125; while (--i);    &#125;&#125;void main()&#123;    unsigned char num=0;    P2=~0x01;    while(1)    &#123;        if(P3_1==0)        &#123;            Delay(20);            while(P3_1==0);            Delay(20);            num++;            if(num&gt;=8)            &#123;                num=0;            &#125;            P2=~(0x01&lt;&lt;num);        &#125;        if(P3_0==0)            &#123;                Delay(20);                while(P3_0==0);                Delay(20);                if(num==0)                    num=7;                else                    num--;                P2=~(0x01&lt;&lt;num);            &#125;    &#125;&#125;</code></pre><h2 id="数码管显示"><a href="#数码管显示" class="headerlink" title="数码管显示"></a>数码管显示</h2><h3 id="静态显示"><a href="#静态显示" class="headerlink" title="静态显示"></a>静态显示</h3><p>代码：</p><pre><code>#include &lt;REGX52.H&gt;unsigned char number[]=&#123;0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F&#125;;void LED(unsigned char location,num)&#123;    switch(location)    &#123;        case 1:P2_4=1;P2_3=1;P2_2=1;break;        case 2:P2_4=1;P2_3=1;P2_2=0;break;        case 3:P2_4=1;P2_3=0;P2_2=1;break;        case 4:P2_4=1;P2_3=0;P2_2=0;break;        case 5:P2_4=0;P2_3=1;P2_2=1;break;        case 6:P2_4=0;P2_3=1;P2_2=0;break;        case 7:P2_4=0;P2_3=0;P2_2=1;break;        case 8:P2_4=0;P2_3=0;P2_2=0;break;    &#125;    P0=number[num];&#125;void main()&#123;    LED(6,9);    while(1)    &#123;    &#125;&#125;</code></pre><h3 id="动态显示"><a href="#动态显示" class="headerlink" title="动态显示"></a>动态显示</h3><p>代码：</p><pre><code>#include &lt;REGX52.H&gt;unsigned char number[]=&#123;0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F&#125;;void Delay(unsigned char xms)        &#123;    unsigned char data i, j;    while(xms--)    &#123;        i= 2;        j = 239;        do        &#123;            while (--j);        &#125; while (--i);    &#125;&#125;void LED(unsigned char location,num)&#123;    switch(location)    &#123;        case 1:P2_4=1;P2_3=1;P2_2=1;break;        case 2:P2_4=1;P2_3=1;P2_2=0;break;        case 3:P2_4=1;P2_3=0;P2_2=1;break;        case 4:P2_4=1;P2_3=0;P2_2=0;break;        case 5:P2_4=0;P2_3=1;P2_2=1;break;        case 6:P2_4=0;P2_3=1;P2_2=0;break;        case 7:P2_4=0;P2_3=0;P2_2=1;break;        case 8:P2_4=0;P2_3=0;P2_2=0;break;    &#125;    P0=number[num];    Delay(1);    P0=0x00;&#125;void main()&#123;    while(1)    &#123;        LED(1,1);        LED(2,2);        LED(3,3);    &#125;&#125;</code></pre><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p>运算符:<br><code>&lt;&lt; :按位左移</code><br>0011 1100&lt;<1  -> 0111 1000</p><p><code>&gt;&gt; :按位右移</code><br>0011 1100&lt;<2  -> 0000 1111</p><p><code>&amp; :按位与</code><br>0001 1000 &amp; 0010 1010 -&gt; 0000 1000</p><p><code>| :按位或</code><br>0001 1000 | 0010 1010 -&gt; 0011 1010</p><p><code>^ :按位异或</code><br>0001 1000 ^ 0010 1010 -&gt; 0011 0010<br><code>~ : 按位取反</code><br>~0001 1000 -&gt; 1110 0111</p><h2 id="LCD1602调试工具"><a href="#LCD1602调试工具" class="headerlink" title="LCD1602调试工具"></a>LCD1602调试工具</h2><table border="1">    <tr>        <th>函数</th>        <th>作用</th>    </tr>    <tr>        <th>LCD_Init();</th>        <th>初始化</th>    </tr>    <tr>        <th>LCD_ShowChar(1,1,'A');</th>        <th>显示一个字符</th>    </tr>    <tr>        <th>LCD_ShowString(1,3,"hello");</th>        <th>显示字符串</th>    </tr>    <tr>        <th>LCD_ShowNum(1,9,123,3);</th>        <th>显示十进制数字</th>    </tr>    <tr>        <th>LCD_ShowSignedNum(1,13,-66,2);</th>        <th>显示有符号的十进制数字</th>    </tr>    <tr>        <th>LCD_ShowHexNum(2,1,0xA8,2);</th>        <th>显示16进制数字</th>    </tr>    <tr>        <th>LCD_ShowBinNum(2,4,0xAA,8);</th>        <th>显示二进制数字</th>    </tr></table><h2 id="矩阵键盘"><a href="#矩阵键盘" class="headerlink" title="矩阵键盘"></a>矩阵键盘</h2><p>代码：</p><pre><code>#include &lt;REGX52.H&gt;#include &quot;LCD1602.h&quot;#include &quot;MatrixKey.h&quot;#include &quot;Delay.h&quot;unsigned char number=0;void main()&#123;    LCD_Init();    LCD_ShowString(1,1,&quot;MatrixKeynumber&quot;);    while(1)    &#123;        number=keynumber();        if(number)        LCD_ShowNum(2,1,number,2);    &#125;&#125;</code></pre><p>MatrixKey文件代码：</p><pre><code>#include &lt;REGX52.H&gt;#include &quot;Delay.h&quot;unsigned char keynumber()&#123;    unsigned char num=0;    P1=0xFF;    P1_3=0;    if(P1_7==0)&#123;Delay(20);while(P1_7==0);Delay(20);num=1;&#125;    if(P1_6==0)&#123;Delay(20);while(P1_6==0);Delay(20);num=5;&#125;    if(P1_5==0)&#123;Delay(20);while(P1_5==0);Delay(20);num=9;&#125;    if(P1_4==0)&#123;Delay(20);while(P1_4==0);Delay(20);num=13;&#125;    P1=0xFF;    P1_2=0;    if(P1_7==0)&#123;Delay(20);while(P1_7==0);Delay(20);num=2;&#125;    if(P1_6==0)&#123;Delay(20);while(P1_6==0);Delay(20);num=6;&#125;    if(P1_5==0)&#123;Delay(20);while(P1_5==0);Delay(20);num=10;&#125;    if(P1_4==0)&#123;Delay(20);while(P1_4==0);Delay(20);num=14;&#125;    P1=0xFF;    P1_1=0;    if(P1_7==0)&#123;Delay(20);while(P1_7==0);Delay(20);num=3;&#125;    if(P1_6==0)&#123;Delay(20);while(P1_6==0);Delay(20);num=7;&#125;    if(P1_5==0)&#123;Delay(20);while(P1_5==0);Delay(20);num=11;&#125;    if(P1_4==0)&#123;Delay(20);while(P1_4==0);Delay(20);num=15;&#125;    P1=0xFF;    P1_0=0;    if(P1_7==0)&#123;Delay(20);while(P1_7==0);Delay(20);num=4;&#125;    if(P1_6==0)&#123;Delay(20);while(P1_6==0);Delay(20);num=8;&#125;    if(P1_5==0)&#123;Delay(20);while(P1_5==0);Delay(20);num=12;&#125;    if(P1_4==0)&#123;Delay(20);while(P1_4==0);Delay(20);num=16;&#125;    return num;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css基础</title>
      <link href="/2023/07/02/5/"/>
      <url>/2023/07/02/5/</url>
      
        <content type="html"><![CDATA[<h1 id="css基础"><a href="#css基础" class="headerlink" title="css基础"></a>css基础</h1><h2 id="css常见引入方式"><a href="#css常见引入方式" class="headerlink" title="css常见引入方式"></a>css常见引入方式</h2><table border="1">    <tr>       <th>引入方式</th>       <th>书写位置</th>       <th>作用范围</th>       <th>使用场景</th>    </tr>    <tr>       <th>内嵌式</th>       <th>css写在style标签内</th>       <th>当前页面</th>       <th>小案例</th>    </tr>    <tr>       <th>外嵌式</th>       <th>CSS单独写在css文件中,通过link标签引入</th>       <th>多个页面</th>       <th>项目中</th>    </tr>    <tr>       <th>行内式</th>       <th>CSS写在标签的style属性中</th>       <th>当前页面</th>       <th>配合js使用</th>    </tr></table><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p>以标签名命名的选择器,选中所有的这个标签都生效CSS。</p><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>结构：.类名{ CSS属性名：属性值}<br>作用：通过类名，找到页面中所有带这个类名的标签<br>注意点：</p><ol> <li>所有标签上都有class属性，class属性的属性值为类名(类似于名字)</li> <li>类名可以有数字，字母，下划线组成，但不能以数字和中划线开头</li> <li>一个标签有多个类名，类名之间用空格分开</li> <li>类名可以重复，一个类选择器可以同时选中多个标签</li></ol><h3 id="id"><a href="#id" class="headerlink" title="id"></a>id</h3><p>结构：#属性名{ CSS属性名：属性值}<br>一个网页中只能存在一个id</p><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><p>结构:*{CSS属性性名：属性值}<br>通配符会作用在该网页的全部标签上。</p><h2 id="文字样式"><a href="#文字样式" class="headerlink" title="文字样式"></a>文字样式</h2><p>字体大小：font-size<br>取值：大小+px；<br>字体粗细：font-weight<br>取值：</p><ul>    <li>关键字：</li>     <table>     <tr>        <th>正常</th>        <th>normal</th>    </tr>    <tr>       <th>加粗</th>       <th>blod</th>    </tr>    </table>    <li>纯数字：100-900的整百数：</li>    <table>    <tr>       <th>正常</th>       <th>400</th>    </tr>    <tr>       <th>加粗</th>       <th>700</th>    </tr>    </table></ul><h3 id="font复合属性"><a href="#font复合属性" class="headerlink" title="font复合属性"></a>font复合属性</h3><p>属性名：font(复合属性)<br>取值：font:style weight size family<br>只能省略前两个，相当设置了默认值</p><h2 id="文本标签"><a href="#文本标签" class="headerlink" title="文本标签"></a>文本标签</h2><h3 id="文本缩进"><a href="#文本缩进" class="headerlink" title="文本缩进"></a>文本缩进</h3><p>属性名：text-indent<br>取值：</p><ul>    <li>数字+px</li>    <li>数字+em(推荐：1em=当前标签的font-size的大小)</li></ul><p>代码：</p><pre><code>p&#123;    text-indent:&#125;</code></pre><h3 id="水平对齐"><a href="#水平对齐" class="headerlink" title="水平对齐"></a>水平对齐</h3><p>属性名：text-align<br>取值：</p><table>    <tr>       <th>属性值</th>       <th>效果</th>    </tr>    <tr>       <th>left</th>       <th>左对齐</th>    </tr>    <tr>          <th>center</th>       <th>居中对齐</th>    </tr>    <tr>       <th>right</th>       <th>右对齐</th>    </tr></table><h3 id="文本修饰"><a href="#文本修饰" class="headerlink" title="文本修饰"></a>文本修饰</h3><p>属性名：text-decoration<br>取值：</p><table>    <tr>       <th>属性值</th>       <th>效果</th>    </tr>    <tr>       <th>underline</th>       <th>下划线(常用)</th>    </tr>    <tr>          <th>line-through</th>       <th>删除线</th>    </tr>    <tr>       <th>overline</th>       <th>上划线</th>    </tr>    <tr>       <th>none</th>       <th>无装饰线</th>    </tr></table><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p>水平居中：margin:0 auto</p><p>层叠性：同一属性值，后写的会覆盖先写的。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html(三)</title>
      <link href="/2023/06/27/4/"/>
      <url>/2023/06/27/4/</url>
      
        <content type="html"><![CDATA[<h1 id="html"><a href="#html" class="headerlink" title="html"></a>html</h1><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><table border="1"><caption>基本标签</caption>     <tr>        <th>标签名</th>        <th>说明</th>    </tr>    <tr>        <th>table</th>        <th>表格整体，可用于包裹多个tr</th>    </tr>    <tr>        <th>tr</th>        <th>表格每行，可用于包裹td</th>    </tr>    <tr>        <th>td</th>        <th>表格单元格，可用于包裹内容</th>    </tr></table>  <p>代码：</p><pre><code>&lt;body&gt;  &lt;table&gt;      &lt;tr&gt;         &lt;td&gt;单元格内容&lt;/td&gt;         &lt;td&gt;单元格内容&lt;/td&gt;           &lt;/tr&gt;      &lt;tr&gt;          &lt;td&gt;第二行单元格内容&lt;/td&gt;          &lt;td&gt;第二行单元格内容&lt;/td&gt;      &lt;/tr&gt;  &lt;/table&gt;&lt;/body&gt;</code></pre><p>注意点：</p><ul> <li>标签的嵌套关系：table>tr>td</li></ul><h3 id="表格的相关属性"><a href="#表格的相关属性" class="headerlink" title="表格的相关属性"></a>表格的相关属性</h3><p>场景：设置表格基本展示效果</p><table border="1"><caption>常见相关属性</caption>     <tr>        <th>属性名</th>        <th>属性值</th>        <th>效果</th>    </tr>    <tr>        <th>border</th>        <th>数字</th>        <th>边框宽度</th>    </tr>    <tr>        <th>width</th>        <th>数字</th>        <th>表格宽度</th>    </tr>    <tr>        <th>height</th>        <th>数字</th>        <th>表格高度</th>    </tr></table>  <p>注意点：</p><ul>   <li>实际开发时针对于样式效果推荐使用CSS</li></ul><p>代码：<code>&lt;table border=&quot; &quot; width=&quot; &quot; heigth=&quot; &quot;&gt;&lt;/table&gt;</code></p><h3 id="表格的标题和表头单元格标签"><a href="#表格的标题和表头单元格标签" class="headerlink" title="表格的标题和表头单元格标签"></a>表格的标题和表头单元格标签</h3><p>场景：在表格中表示整体大标题和一列小标题</p><table border="1"><caption>其他标签</caption>     <tr>        <th>标签名</th>        <th>名称</th>        <th>说明</th>    </tr>    <tr>        <th>caption</th>        <th>表格大标题</th>        <th>表示表格整体大标题，默认在表格整体顶部居中显示</th>    </tr>    <tr>        <th>th</th>        <th>表头单元格</th>        <th>表示一列小标题，通常用于表格第一行，默认内部文字加粗居中显示</th>    </tr></table>  <p>注意点：</p><ul>  <li>caption标签写在table标签内部</li>  <li>th标签书写在tr标签内部(用于替换td标签)</ul><h3 id="表格的结构标签（了解）"><a href="#表格的结构标签（了解）" class="headerlink" title="表格的结构标签（了解）"></a>表格的结构标签（了解）</h3><p>场景：让表格的内容结构分组，突出表格的不同部分（头部，主体，底部），使语义更清晰。</p><table border="1"><caption>结构标签</caption>     <tr>        <th>标签名</th>        <th>名称</th>    </tr>    <tr>        <th>thead</th>        <th>表格头部</th>    </tr>    <tr>        <th>tbody </th>        <th>表示主体</th>    </tr>    <tr>        <th>tfoot </th>        <th>表示底部</th>    </tr></table>  <p>注意点：</p><ul><li>表格结构标签内部用于包裹tr标签</li><li>表格的结构标签可以省略</li></ul><h3 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h3><p>场景：将水平或垂直的多个单元格合并。</p><p>合并单元格步骤：</p><ol>  <li>明确合并哪几个单元格</li>  <li>通过左上原则确定保留谁删除谁      <ul>         <li>上下合并只保留最上的，删除其他</li>         <li>左右合并只保留最左的，删除其他</li>     </ul>  </li>  <li>给保留的单元格设置：跨行合并和跨列合并</li></ol><table border="1">     <tr>         <th>属性名</th>         <th>属性值</th>         <th>说明</th>    </tr>    <tr>         <th>rowspan</th>         <th>合并单元格的个数</th>         <th>跨行合并，将多行的单元格垂直合并</th>    </tr>    <tr>         <th>colspan</th>         <th>合并单元格的个数</th>         <th>跨列合并，将多列的单元格水平合并</th>    </tr></table><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><h3 id="input标签"><a href="#input标签" class="headerlink" title="input标签"></a>input标签</h3><p>代码:<code>&lt;input type=&quot; &quot;&gt;</code></p><table border="1">    <tr>       <th>type</th>       <th>说明</th>    </tr>    <tr>       <th>text</th>       <th>文本框，用于输入单行文本</th>    </tr>    <tr>       <th>password</th>       <th>密码框，用于输入密码</th>    </tr>    <tr>       <th>radio</th>       <th>单选框,多选一</th>    <tr>       <th>checkbox</th>       <th>多选框，多选多</th>    </tr>    <tr>       <th>file</th>       <th>文件选择，用于上传文件</th>    </tr>    <tr>       <th>submit</th>       <th>提交按钮，用于提交</th>    </tr>    <tr>       <th>reset</th>       <th>重置按钮，用于重置</th>    </tr>    <tr>       <th>button</th>       <th>普通按钮，无特殊功能,之后配合js添加功能</th>    </tr></table><p>占位符：placeholder,用于提示用户输入。<br>代码:<code>&lt;input type=&quot; &quot; placeholder=&quot; &quot;&gt;</code></p><h3 id="input单选框"><a href="#input单选框" class="headerlink" title="input单选框"></a>input单选框</h3><p>场景：在网页中显示多选一的单选表单控件</p><p>type属性值：radio。</p><table border="1">    <tr>       <th>属性名</th>       <th>说明</th>    </tr>    <tr>       <th>name</th>       <th>分组，有相同name属性值的单选框为一组，一组中同时只能有一个被选中</th>    </tr>    <tr>       <th>checked</th>       <th>默认选中</th>    </tr></table><p>代码：<code>&lt;input type=&quot;radio&quot; name=&quot; &quot; checked（添加后会默认勾选该选项）&gt;</code></p><h3 id="input其他属性值说明"><a href="#input其他属性值说明" class="headerlink" title="input其他属性值说明"></a>input其他属性值说明</h3><h4 id="多文件选择"><a href="#多文件选择" class="headerlink" title="多文件选择"></a>多文件选择</h4><p>代码：<code>&lt;input type=&quot;file&quot; multiple&gt;</code></p><h4 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h4><p>submit:<code>&lt;input submit value=&quot; &quot;&gt;</code><br>reset: <code>&lt;input reset value=&quot; &quot;&gt;</code><br>button: </p><pre><code>&lt;button type=&quot;submit&quot;&gt;提交按钮&lt;/button&gt;&lt;button type=&quot;reset&quot;&gt;重置按钮&lt;/button&gt;&lt;button type=&quot;button&quot;&gt;普通按钮&lt;/button&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大一经历</title>
      <link href="/2023/06/25/3/"/>
      <url>/2023/06/25/3/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/30.jpg" alt=""> <img src="/images/31.jpg" alt=""><br><img src="/images/32.jpg" alt=""> <img src="/images/33.jpg" alt=""><br><img src="/images/34.jpg" alt=""> <img src="/images/35.jpg" alt=""><br><img src="/images/36.jpg" alt=""> <img src="/images/37.jpg" alt=""><br><img src="/images/38.jpg" alt=""> <img src="/images/39.jpg" alt=""><br><img src="/images/40.jpg" alt=""> <img src="/images/41.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html(二)</title>
      <link href="/2023/06/24/2/"/>
      <url>/2023/06/24/2/</url>
      
        <content type="html"><![CDATA[<h1 id="列表的应用场景"><a href="#列表的应用场景" class="headerlink" title="列表的应用场景"></a>列表的应用场景</h1><h2 id="1-无序列表"><a href="#1-无序列表" class="headerlink" title="1.无序列表"></a>1.无序列表</h2><p>代码：</p><pre><code>&lt;body&gt;    &lt;ul&gt;    &lt;li&gt;列表内容&lt;/li&gt;    &lt;/ul&gt;&lt;/body&gt;</code></pre><p>场景：在网页中表示一组无顺序之分的列表，如：新闻列表</p><table border="1"><caption>标签组成</caption>     <tr>        <th>标签名</th>        <th>说明</th>    </tr>    <tr>        <th>ul</th>        <th>表示无序列表的整体，用于包裹li标签</th>    </tr>    <tr>        <th>li </th>        <th>表示无序标签的每一项，用于包含每一行内容</th>    </tr></table> <p>显示特点：列表的每一项前默认显示圆点标识<br>注意点：</p><ul> <li>ul标签只能包含li标签</li> <li>li标签可以包含任意内容</li></ul><h2 id="2-有序列表"><a href="#2-有序列表" class="headerlink" title="2.有序列表"></a>2.有序列表</h2><p>代码：</p><pre><code>&lt;body&gt;     &lt;ol&gt;     &lt;li&gt;列表内容&lt;/li&gt;     &lt;/ol&gt;&lt;/body&gt;</code></pre><p>场景：在网页中表示一组有顺序之分的列表，如：排行榜</p><table border="1"><caption>标签组成</caption>     <tr>        <th>标签名</th>        <th>说明</th>    </tr>    <tr>        <th>ol</th>        <th>表示有序列表的整体，用于包裹li标签</th>    </tr>    <tr>        <th>li </th>        <th>表示有序标签的每一项，用于包含每一行内容</th>    </tr></table> <p>显示特点：列表的每一项前默认显示序号标识<br>注意点：</p><ul>         <li>ol标签只允许包含li标签</li>    <li>li标签可以包含任意内容</li></ul><h2 id="3-自定义列表"><a href="#3-自定义列表" class="headerlink" title="3.自定义列表"></a>3.自定义列表</h2><p>代码：</p><pre><code>&lt;body&gt;     &lt;dl&gt;           &lt;dt&gt;标签内容&lt;/dt&gt;           &lt;dd&gt;标签内容&lt;/dd&gt;     &lt;/dl&gt;&lt;/body&gt;</code></pre><p>场景：在网页的底部导航中通常会使用自定义列表实现。</p><table border="1"><caption>标签组成</caption>     <tr>        <th>标签名</th>        <th>说明</th>    </tr>    <tr>        <th>dl</th>        <th>表示自定义列表整体，用于包裹dt/dd标签</th>    </tr>    <tr>        <th>dl</th>        <th>表示自定义列表的主题</th>    </tr>    <tr>        <th>dd</th>        <th>表示自定义列表的针对主题的每一项内容</th>    </tr></table>  <p>显示特点：dd标签会默认显示缩进效果<br>注意点：</p><ul>     <li>dl标签只允许包含dt/dd标签</li>     <li>dt/dd标签可以包含任意内容</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随便发点</title>
      <link href="/2023/06/20/1/"/>
      <url>/2023/06/20/1/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/12.jpg" alt=""><br><img src="/images/13.jpg" alt=""><br><img src="/images/14.jpg" alt=""><br><img src="/images/15.jpg" alt=""><br><img src="/images/17.jpg" alt=""><br><img src="/images/21.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 二次元 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html基础知识(一)</title>
      <link href="/2023/06/07/html/"/>
      <url>/2023/06/07/html/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML基本框架"><a href="#HTML基本框架" class="headerlink" title="HTML基本框架"></a>HTML基本框架</h1><p>代码：</p><pre><code>&lt;html&gt;&lt;head&gt;&lt;tittle&gt;网页的标题&lt;/tittle&gt;&lt;/head&gt;&lt;body&gt;网页的主题内容&lt;/body&gt;&lt;/html&gt;</code></pre><h1 id="HTML标签"><a href="#HTML标签" class="headerlink" title="HTML标签"></a>HTML标签</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><pre><code>&lt;h1&gt;一级标题&lt;/h1&gt;&lt;h2&gt;二级标题&lt;/h2&gt;</code></pre><p>依此类推，一共有6级标题</p><h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><pre><code>&lt;body&gt;&lt;p&gt;段落内容&lt;/p&gt;&lt;/body&gt;</code></pre><h2 id="换行与水平线"><a href="#换行与水平线" class="headerlink" title="换行与水平线"></a>换行与水平线</h2><p>换行符：<code>&lt;br&gt;</code><br>水平线：<code>&lt;hr&gt;</code></p><h2 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h2><p><img src="/images/16.jpg" alt=""></p><h1 id="图片的基本使用"><a href="#图片的基本使用" class="headerlink" title="图片的基本使用"></a>图片的基本使用</h1><h2 id="图片的标签"><a href="#图片的标签" class="headerlink" title="图片的标签"></a>图片的标签</h2><pre><code>&lt;img src=&quot;图片的地址&quot; alt=&quot;图片无法加载时显示的内容&quot; tittle=&quot;鼠标悬停时显示&quot; width=&quot; &quot; height=&quot; &quot;&gt;</code></pre><p>如果只设置了width或height中的一个，另一个会自动等比例缩放。</p><h2 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h2><h2 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h2><p>指根目录下的绝对位置，可以直接到达目标位置，通常从盘符开始的路径。<br>例如：<br>     盘符开头：<code>D:\example\images\1.jpg</code><br>     完整网络地址：<code>https://example.com/images/1.jpg</code></p><h2 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h2><h3 id="同级与下级"><a href="#同级与下级" class="headerlink" title="同级与下级"></a>同级与下级</h3><p>  同级：<code>&lt;img src=&quot;1.jpg&quot;&gt;</code><br>  下级：<code>&lt;img src=&quot;images/1.jpg&quot;&gt;</code></p><h3 id="上级"><a href="#上级" class="headerlink" title="上级"></a>上级</h3><p>  <code>&lt;img src=&quot;../images/1.jpg&quot;&gt;</code></p><h1 id="音频标签"><a href="#音频标签" class="headerlink" title="音频标签"></a>音频标签</h1><p> 代码：<code>&lt;audio src=&quot;./music.mp3&quot; controls&gt;&lt;/audio&gt;</code><br> <img src="/images/18.png" alt=""></p><h1 id="视频标签"><a href="#视频标签" class="headerlink" title="视频标签"></a>视频标签</h1><p> 代码：<code>&lt;video src=&quot;./video.mp4&quot; controls&gt;&lt;/video&gt;</code><br> <img src="/images/19.png" alt=""></p><h1 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h1><p> 代码：<code>&lt;a href=&quot;./目标网页.html&quot;&gt;</code>目标网页<code>&lt;/a&gt;</code><br> <code>&lt;a href=&quot;#&quot;&gt;</code>空连接，不知道到哪里去<code>&lt;/a&gt;</code><br> target属性值：<code>&lt;a href=&quot;./网页地址.html&quot; target=&quot; &quot;&gt;&lt;/a&gt;</code><br> <img src="/images/20.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+github博客搭建教程</title>
      <link href="/2023/05/30/new/"/>
      <url>/2023/05/30/new/</url>
      
        <content type="html"><![CDATA[<h1 id="一、配置环境"><a href="#一、配置环境" class="headerlink" title="一、配置环境"></a><strong>一、配置环境</strong></h1><p>Git(<a href="https://git-scm.com/">https://git-scm.com/</a>)</p><p>安装时一直next就行。</p><p>node.js(<a href="https://nodejs.cn/download/">https://nodejs.cn/download/</a>)</p><h1 id="二、注册GitHub和创建资源库"><a href="#二、注册GitHub和创建资源库" class="headerlink" title="二、注册GitHub和创建资源库"></a><strong>二、注册GitHub和创建资源库</strong></h1><p>GitHub官网(<a href="https://github.com/">https://github.com/</a>)</p><p><img src="/images/2.jpg" alt=""><br><img src="/images/3.jpg" alt=""><br><img src="/images/4.jpg" alt=""><br><img src="images/5.jpg" alt=""></p><h1 id="三、本地配置安装Hexo"><a href="#三、本地配置安装Hexo" class="headerlink" title="三、本地配置安装Hexo"></a><strong>三、本地配置安装Hexo</strong></h1><p>首先创建文件夹取名为blog，然后进入文件夹，点击鼠标右键选择Git Bash Here<br>然后输入 $  npm install hexo-cli -g</p><p>完成后在输入 $ hexo init<br>(完成后文件夹中会出现许多文件)</p><h1 id="四、生成与绑定ssh秘钥"><a href="#四、生成与绑定ssh秘钥" class="headerlink" title="四、生成与绑定ssh秘钥"></a><strong>四、生成与绑定ssh秘钥</strong></h1><h2 id="1-生成ssh秘钥"><a href="#1-生成ssh秘钥" class="headerlink" title="1.生成ssh秘钥"></a><strong>1.生成ssh秘钥</strong></h2><p>输入命令 $ ssh-keygen -t rsa -C “注册github时的邮箱地址”(输入完成后按四次回车键，然后会有.ssh文件的地址)</p><p>接着去c盘查看,然后用记事本打开id_rsa.put文件并复制(直接双击是无法查看文件的，一定要用记事本打开!)</p><h2 id="2-绑定秘钥"><a href="#2-绑定秘钥" class="headerlink" title="2.绑定秘钥"></a><strong>2.绑定秘钥</strong></h2><p><img src="/images/6.jpg" alt=""><br><img src="/images/7.jpg" alt=""></p><p>完成后可以输入命令 $ ssh -T git@github.com 并且输入yes之后，行末尾会显示你的用户名</p><p>（绑定成功邮箱会收到邮件提醒）<br><img src="/images/9.png" alt=""></p><p>接着在本地绑定与Github的用户名和邮箱<br>输入命令：$ git config —global user.name “注册时用户名”<br>输入命令：$ git config —global user.email “注册时邮箱”</p><h1 id="五、上传博客"><a href="#五、上传博客" class="headerlink" title="五、上传博客"></a><strong>五、上传博客</strong></h1><p>打开blog文件夹下的_config.yml<br><img src="/images/8.jpg" alt=""><br>然后将文章末尾改为以下格式：<br>deploy:<br>        type: git<br>        repo: <a href="https://github.com/用户名/用户名.github.io.git">https://github.com/用户名/用户名.github.io.git</a><br>        branch: main<br>(注意空格)<br>接着需要安装一个上传工具<br>接着输入命令：npm install hexo-deployer-git<br>然后依次输入命令：hexo cl<br>                hexo g<br>                hexo d<br>出现下图就表示上传成功了！<br><img src="/images/10.png" alt=""></p><p>注意<br>如果出现如图错误网络报错，再次尝试，多次尝试，直到更换WiFi~~~~</p><p><img src="/images/11.png" alt=""><br>然后就可以通过 用户名.github.io访问博客了。</p><p><strong>注意二</strong><br>如果输入命令 hexo d后，git的命令栏只有一行：INFO Validating config<br>可以依次输入下列命令：git init<br>                    git add .<br>                    git commit -m “my blog first commit”<br>                    git remote add origin “远端github仓库地址”<br>                    git branch -M main<br>然后在输入一遍 hexo d</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>绫华！</title>
      <link href="/2023/05/27/hello-world/"/>
      <url>/2023/05/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/1.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 二次元 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图片 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
